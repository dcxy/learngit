  ● 初始化 git init
  ● 添加 git add 文件名
  ● 提交 git commit -m 字符串
  ● 查看状态git status
  ● 查看改动git diff 文件名
  ● 查看历史记录：git log 可以加上--pretty=oneline 参数
  ● 版本回退 git reset  --hard HEAD^  	//HEAD^表示上一个版本head^^表示上上个版本
  ● 也可以通过 git reset  --hard [commit id]变成未来的版本
  ● 查看历史命令可以用 git reflog
  ● 备注：HEAD指向的版本就是当前的版本
  ● git checkout -- file 可以丢弃工作区的修改//
//checkout就是把版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
  ● git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
  ● 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
  ● 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
  ● 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
      ○ 要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
  ● 关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
  ● 此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
  ● $ git clone git@github.com:michaelliao/gitskills.git //将 远程仓库克隆到本地
  ● Git鼓励大量使用分支：
  ● 查看分支：git branch
  ● 创建分支：git branch <name>
  ● 切换分支：git checkout <name>
  ● 创建+切换分支：git checkout -b <name>
  ● 合并某分支到当前分支：git merge <name>
  ● 删除分支：git branch -d <name>
  ● 当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
  ● 用git log --graph命令可以看到分支合并图
  ● 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
  ● 当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
  ● 开发一个新feature，最好新建一个分支；
  ● 如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
  ● 查看远程库信息，使用git remote -v；
  ● 本地新建的分支如果不推送到远程，对其他人就是不可见的；
  ● 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
  ● 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
  ● 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
  ● 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
  ● 命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
  ● git tag -a <tagname> -m "blablabla..."可以指定标签信息；
  ● git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
  ● 命令git tag可以查看所有标签
  ● 命令git push origin <tagname>可以推送一个本地标签；
  ● 命令git push origin --tags可以推送全部未推送过的本地标签；
  ● 命令git tag -d <tagname>可以删除一个本地标签；
  ● 命令git push origin :refs/tags/<tagname>可以删除一个远程标签
  ● 
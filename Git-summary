Git总结
1.windows安装git
  下载安装包、默认安装选项
  安装完成后设置user.name和user.email
       git config --global user.name "Your Name"
	   git config --global user.email "email@example.com"
2.创建版本地库repository
   选择合适路径，创建空目录
       mkdir dict_name
	把该目录变成git仓库
	    git init
	把文件添加到版本库（工作区working directory-暂存区stage-分支branch）
	    touch test.txt
		git add test.txt
		git commit -m "add a file: test.txt"  （本次提交说明）
		(会出现换行符问题，#UNIX/LINUX:LF;DOS/WINDOWS:CRLF#使用命令git config --global core.autocrlf false)
3.版本修改
   查看仓库状态(常使用)
       git status
    查看本地与git仓库差异
	   git diff file_name
	查看最近到最远的提交日志
		git log
		git log --pretty=oneline
	回退版本
		回到上一版本    git reset --hard HEAD^
		回到上上个版本  git reset --hard HEAD^^
		回到上100个版本 git reset --hard HEAD~100
		回退后想再回到较新的版本   git reset --hard 要回到的commit_id
		回退并重启后想恢复到新版本 git reflog 查询整个本地仓库的commit，以确定恢复到哪个版本
		（显示整个本地仓储的commit, 包括所有branch的commit, 甚至包括已经撤销的commit, 只要HEAD发生了变化, 就会在reflog里面看得到. git log只包括当前分支的commit.）
	管理修改
	    查看工作区和版本库中最新版本的区别
		    git diff HEAD -- file_name
		每次commit提交的是add进暂存区stage的内容，不add就不会被提交
	撤销修改
	    未add，把文件在工作区的修改全部撤销，撤销后和版本库状态一模一样
		   git checkout -- file_name  
        已add未commit，把暂存区的修改回退到工作区，在丢弃工作区的修改
	       git reset HEAD file_name
		   git checkout -- file_name
		add并且commit过了，回退到指定版本
		    git reset --hard HEAD^
	删除文件
	     从本地删除文件
			rm file_name
		 从版本库删除文件
		    git rm file_name
			git commit -m "remove file_name"
		 本地删错了，从版本库检出文件
		    git checkout -- file_name
4.远程仓库-Github-Git仓库托管
	SSH或者HTTP传输
	添加远程仓库
	   a.用户主目录下看有没有id_rsa和id_rsa.pub文件，若有，跳过创建SSH Key的步骤
	     windows下打开Git Bash 
		   ssh-keygen -t rsa -C "email@example.com"
		（使用HTTP若需设置代理： git config --global http.proxy http://username:password@ip:port）
		b.登陆Github，Account Settings-SSH Key，key文本框粘贴公钥.id_rsa.pub内容
		c.Github-Create a new repository
		d.本地仓库内容推送到Github仓库
		  git remote add origin #github上的地址#
		  eg.
		  git remote add origin https://github.com/liyapingXY/learngit.git
		  git remote add origin git@github.com:liyapingXY/learngit.git
		 e.第一次推送加-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来
		    git push -u origin master
	从远程库克隆
		git clone #github上的地址#
5.分支管理
	创建并切换到newbranch分支
		git checkout -b newbranch
	创建分支
		git branch newbranch
	切换分支
		git checkout newbranch
	FF方式（fast-forward）合并指定分支到当前分支
		git merge dev
	--no-ff方式的合并dev分支内容到当前分支
		git merge --no-ff -m "提交说明" dev
	删除分支
		git branch -d branch_name
	查看分支
		git branch
	合并分支时有冲突，手动解决冲突-提交-合并
	查看分支合并图
		git log --graph
		git log --graph --pretty=oneline --abbrev-commit
	创建bug分支-合并-删除，但当前分支工作未完成，不适合提交时，可将工作现场封存，待bug修复后再恢复
		git stash
		git stash list  (查看储藏的工作现场)
		git stash pop	(恢复同时把stash删除）
	   #恢复到指定的stash内容#
	   git stash apply stash@{0}
	   git stash drop stash@{0}
	 强制删除没有合并过的分支
		git branch -D branch_name
	查看远程库信息
		git remote -v
	推送本地分支到对应的远程分支上
		git push origin master
	（主分支master和开发分支dev有必要与远程同步，其他独自完成的分支不必要）
	创建远程origin的dev分支到本地（git clone只能克隆master）
		git checkout -b dev origin/dev
	 自己要提交的文件与别人已提交过的文件冲突时，从远程抓取文件-本地合并-解决冲突-推送
		git branch --set-upstream dev origin/dev  (设置dev与origin/dev的链接)
		git pull
		解决冲突
		git commit -m "说明"
		git push origin branch_name
6.标签管理
	在需要打标签的分支上
		git tag <tag_name> (默认HEAD)
	指定标签信息
		git tag -a <tag_name> -m "说明"
	查看所有标签
		git tag
	删除本地标签
		git tag -d <tag_name>
	删除远程标签
		git push origin :refs/tags/<tag_name>
	推送本地标签
		git push origin <tag_name>
		git push origin --tags (推送全部标签)
7.Tips
	忽略特殊文件
		在Git工作区的根目录下创建一个特殊的.gitignore文件（放在版本库并使用git管理），然后把要忽略的文件名填进去
			可引用 https://github.com/github/gitignore
	 配置别名
		git config --global alias.<缩略>  全称
		eg. git config --global alias.br branch
8.搭建git服务器
	准备一台linux服务器
	1.安装git
		sudo apt-get install git
	2.创建一个git用户，用以运行git服务
		sudo adduser git
	3.创建证书登录
		把所有公钥（需要登录用户的id_rsa.pub文件内容）导入到/home/git/.ssh/authorized_keys文件中，一行一个
	4.初始化Git仓库，选定一个目录作为Git仓库，假定/srv/sample.git，在/srv下输入命令
		sudo git init --bare sampe.git
	 更改git仓库的owner
		sudo chown -R git:git sample.git
	5.出于安全考虑，禁用shell登录
	（git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出）
		编辑/etc/passwd中
		 git:x:1001:1001:,,,:/home/git:/bin/bash
		改为
		 git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
	6.克隆远程仓库
		git clone git@server:/srv/sample.git
		
注：管理公钥&管理权限 使用 Gitosis
		
	
	
		

		
		
	 
	 
	   
		
		
   
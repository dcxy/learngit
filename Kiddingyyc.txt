Hello Mr Liao
Thank you very much
these are my notes
提示:[]里的是指令
非git 的命令
[mkdir 文件名]     创建一个文件夹
[cd]    			进入一个文件夹
[cat] 				查看文件内容
[pwd]				查看当前路径
[rm]				删除文件
[rmdir]				删除空的文件夹

git 的命令
[$ git init] 				初始化一个git仓库
[$ git add  文件名]      	把文件加到暂存区
[$ git commit -m "描述"]   	把暂存区的内容提交
[$ git status]				显示所有文件的状态
[$ git diff 文件名]			只会显示工作区文件内容的改变,如果加到暂存区了,就不会显示内容了
[$ git log]					显示文件的提交日志
[$ git log --pretty=oneline]	在一行里显示文件的提交日志
[$ git reset --hard HEAD^]		版本回退到上一个版本
[$ git reset --hard HEAD~n]		版本回退到第前n个版本
[$ git reset --hard 版本commit id]	版本回退到指定的commit id号对应的版本
[$ git reflog]						显示当前仓库的提交和回退操作指令日志
[$ git checkout -- <file>] 			(注意:--很重要,必加.否则就成了改变分支)把工作区的文件内容修改全部取消,回退到最近的commit|add状态
[$ git reset <HEAD|HEAD^|HEAD~n> <文件名>] 		把暂存区的指定的修改给移除
[$ git rm <file>]								删除版本库里的文件,并且会把工作区的文件也删除
[$ git remote add <自定义远程库名> git@github.com:用户名/库名.git]		创建一个远程库连接点
[$ git remote add <自定义远程库名> https://github.com/用户名/库名.git]	创建一个远程库连接点,但每次都需要输账号密码
[$ git push -u <自定义远程库名> 远程库的分支名]									把修改提交到远程服务器,第一次加一个-u参数
[$ git push <自定义远程库名> 远程库的分支名]									把修改提交到远程服务器的对应分支
[$ git pull --rebase <自定义的远程库名> <分支名>]						从远程库里拉取内容
[$ git clone git@github.com:用户名/库名.git]							从远程库克隆
[$ git branch]								查看所有分支,当前分支前有一个*号
[$ git branch <分支名>]						创建一个新的分支					
[$ git branch -d <分支名>]					删除一个分支
[$ git merge <分支名>]						在当前HEAD指向的分支里合并指定分支
[$ git checkout <分支名>]					转换分支,就是转换HEAD指针的指向
[$ git checkout -b <分支名>]				创建一个新的分支并指向此分支
[$ git log --graph --pretty=oneline --abbrev-commit]			看提交的结构
[$ git merge --no-ff -m "描述" <分支名>]						融合分支但是不是快进模式,就是说显示分支的结构
[$ git stash]													会把当前的工作环境存储起来
[$ git stash list]												查看已经存储的环境
[$ git stash apply <存储的工作环境序号>]						会把指定的工作环境恢复,同时还会比较冲突,但不会删除序号
[$ git stash pop <存储的工作环境序号>]							会把指定的工作环境恢复,同时还会比较冲突,同时删除序号												
[$ git branch -D <分支名>]						强制删除分支
[$ git remote -v]								显示较详细远程信息
[$ git remote]									显示简短的远程信息
[$ git branch --set-upstream 当前分支名 origin/<远程分支名>]		在当前分支和远程分支之间建立一个流桥梁
[$ git pull]							在已建立流桥梁的情况下,可以拉取远程的最新库
[$ git tag <tag名> <默认commit是HEAD>]			在当前最近的一次提交下建立一个标签
[$ git tag <tag名> commitId]					在指定的提交下建立一个标签
[$ git tag -a <tag名> -m "描述" commitId]		在指定的提交下建立一个标签,并加上描述信息和名字
[$ git tag -s <tag名> -m "描述" commitId]		在指定的提交下建立一个标签,并加上描述信息和名字,但是用PGP签名标签
[$ git tag]										查看所有的标签	
[$ git show <tag名>]							查看标签的信息
[$ git push origin <tag名>]						把指定标签推送到远程
[$ git push origin --tags]						把未提交的标签全部推送到远程
[$ git tag -d <tag名>]							删除标签
[$ git push origin :refs/tags/<tag名>]			在远程删除一个标签,注:必须现在本地删除标签



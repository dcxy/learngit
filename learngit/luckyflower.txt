git init 			初始化一个Git仓库
git add <file> 		文件添加到仓库（实际上就是把文件修改添加到暂存区；）
git commit -m "xx" 	把文件提交到仓库（实际上就是把暂存区的所有内容提交到当前分支）
git status 		仓库当前的状态
git diff 		查看修改内容
git log 		查看从最近到最远的提交日志（嫌输出信息太多，可以加上 ?--pretty=oneline 参数）
HEAD 			指当前版本（上一个版本就是HEAD^，上上一个版本就是HEAD^^，100个版本可写成HEAD~100）
git reset --hard commit_id 	在版本的历史之间穿梭
git reflog 		查看命令历史，可重返未来的版本
git diff HEAD -- <file> 查看工作区和版本库里面最新版本的区别
git checkout -- file 	丢弃工作区的修改（若未git add到暂存区，直接丢弃工作区的修改）
git reset HEAD file 	把暂存区的修改撤销掉，重新放回工作区（已经git add到了暂存区，先撤销放回工作区，再执行丢弃工作区修改的命令）
git rm 			删除一个文件
git remote add origin git@server-name:path/repo-name.git 	将本地仓库与远程库关联起来
git clone git@server-name:path/repo-name.git 				将远程库克隆到本地
git push -u origin master 									第一次推送master分支的所有内容；
git push origin master 										把当前分支master推送到远程
git branch 				查看分支
git branch <name> 		创建分支
git checkout <name> 	切换分支
git checkout -b <name>	创建+切换分支
git merge <name> 		合并某分支到当前分支（启用Fast forward模式，删除分支后，会丢掉分支信息）
git merge --no-ff <name>合并某分支到当前分支（启用普通模式，合并后的历史有分支，能看出来曾经做过合并）
git branch -d <name> 	删除分支
git log --graph 		查看分支合并图
git stash 				当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list 			查看被‘储藏’的工作现场
git stash apply 		恢复被‘储藏’的工作现场
git stash drop 			删除被‘储藏’的工作现场
git stash pop 			恢复+删除被‘储藏’的工作现场
git branch -D <name> 	强行删除丢弃一个没有被合并过的分支
git remote 				查看远程库的信息
git remote -v 			显示远程库更详细的信息
git push origin branch-name 	推送分支，就是把该分支上的所有本地提交推送到远程库。
git checkout -b branch-name origin/branch-name 				在本地创建和远程分支对应的分支
git branch --set-upstream branch-name origin/branch-name 	指定本地分支与远程分支的链接（链接关系没有创建会提示“no tracking information”）
git pull 			把最新的提交从远程库origin抓下来
git tag <name> 		用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag 			查看所有标签
git show <tagname> 	查看标签信息
git push origin <tagname> 	推送一个本地标签
git push origin --tags 		推送全部未推送过的本地标签
git tag -d <tagname> 		删除一个本地标签
git push origin :refs/tags/<tagname> 	删除一个远程标签
提交改变：
git add readme.txt
git add -A //提交所有改变

确认：
git commit -m “备注”

获取当前状态：
git status

获取改变：
git diff
git diff readme.txt    
git diff HEAD — readme.txt//查看工作区和版本库里面最新版本的区别

获取版本：
git log
git log —pretty=oneline//使每个版本在一行->只显示HASH号和修改备注
git log —graph//显示图标
git log --graph --pretty=oneline --abbrev-commit//显示简略的分支图

获取每一次操作的记录：
git reflog

版本回退：
git reset —hard HEAD^//回到上一个版本
git reset —hard HEAD^^//回到上上个版本
git reset —hard HEAD～100//回到上100个版本
git reset —hard 336173631//回到特定版本，加上HASH号，不用打完

撤销修改：
git checkout —- readme.txt //回到最近一次git add或者git commit的状态
//同样适用于误删除文件

如果你已经add过了：
git reset HEAD readme.txt //这时候工作区还在，只是暂存区的不在了，然后再使用一次撤销修改的操作就好了

从git版本库中删除：
git rm test.txt//之后同样要commit

关联一个远程库：
git remote add origin https://github.com/shenyi1028/learngit.git //类似这样，记得在git库的目录下执行。

将修改推送至github：
git push -u origin master//第一次推送
git push origin master 

从远程库克隆：
git clone https://github.com/shenyi1028/gitskills //类似这样，其他格式没有尝试成功
git clone git@github.com:shenyi1028/gitskills.git //没有尝试成功

创建分支：
git checkout -b dev//我猜b是branch的意思？
表示{git branch dev + git checkout dev}

查看当前分支：
git branch//当前分支前面有一个*

合并分支：
git merge dev//后面那个是要合并的分支
git merge --no-ff -m "merge with no-ff” dev//—-no-ff表示禁用fast forward

删除分支：
git branch -d dev
git branch -D <name>//强行删除一个没有合并的分支，因为没有合并的分支不能用普通的删除方式删除

将当前现场工作储存起来：（因为规则是提交了之后才能切换分支，如果你现在做任务A做了一半，有人要你去分支B改一个bug，你不能把做了一半的任务A提交，这是对别人不负责任，你自己以后也想不起来，所以你需要一下功能）
git stash

查看工作现场列表：
git stash list

恢复工作现场：
git stash apply//恢复
git stash apply stash@{0}//指定恢复条目
git stash drop//删除
或者：
git stash pop

查看远程库的信息：
git remote
git remote// 查看详细信息

默认情况下克隆只能看到master分支，要想用远程的dev分支需要重新创建：
git checkout -b dev origin/dev //前面是创建的分支，后面是来源
之后修改之后
git push origin dev

获取分支的最新修改
git pull
如果失败是因为没有建立本地分支和远程分支的链接：
git branch —-set-upstream dev origin/dev
git branch —-set-upstream-to=origin/dev //据说更新后是这样的

贴标签：
git tag <name> //需要切到需要贴标签的分支上
git tag <tag_name> <commit id> //给指定的commit 打标签
git tag -a <tag_name> -m “txt” <commit id>//-a表示指定标签名 -m表示说明文字
git tag -s <tag_name> -m “txt” <commit id>//-s 表示用私钥签名一个标签

查看现有标签：
git tag

查看标签信息：
git show <标签号>

删除标签：
git tag -d <tag_name>

推送标签到远程：
git push origin <tag_name>
git push origin —-tags //一次性推送所有没有推送到远程的标签

删除远程的标签：
git tag -d <tag_name> //先删除本地的标签
git push origin :refs/tags/<tag_name>


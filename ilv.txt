初始化git仓库：git init
克隆现有仓库：git clone [URL] [newName]
检查当前文件工作状态：git status
检查当前文件工作状态(紧凑输出)：git status -s
A：新添加到暂存区的文件
   M：文件被修改了，还没有放入暂存区
M：文件被修改了，并且放入暂存区
MM：文件被修改并放入暂存区，然后文件又在工作区被修改了
？？：新添加的文件还没有放入暂存区
跟踪新文件：git add [FileName] 
创建忽略文件： 创建 .gitignore 文件
查看工作区域与暂存区域的差别：git diff
查看尚未暂存的文件更新了哪些部分：git diff
要查看已暂存的将要添加到下次提交的内容：git diff —staged
提交：git commit -m “description message”
从工作区删除文件：rm [FileName]
确实要从版本库中删除文件：git rm [FileName]  git commit -m “description message”
Git中对文件改名：git mv [OldName] to [NewName] git commit -m “description message”
查看提交历史：git log -p -2
-p用来显示每次提交的内容差异 
-2用来显示最近两次提交
—graph显示图形显示的分支合并历史
提交历史放在一行显示：git log —pretty=oneline
如果想退回到上一个版本：git reset —hard HEAD^
HEAD表示当前版本 HEAD^表示上一个版本 HEAD^^表示上上一个
往上100个版本HEAD~100
退回到指定版本号的版本：git reset —hard [版本号]
查看每一次命令(命令历史)：git reflog
放弃工作区的修改：git checkout — [FileName]
把暂存区的修改放弃掉：git reset HEAD [FileName] 然后可以继续放弃工作区的修改

 远程仓库是指托管在因特网或其他网络中的你的项目的版本库。
将本地项目关联到远程库：git remote add origin [URL]
添加一个新的远程仓库：git remote add [remote-name] [url]
远程仓库重命名：git rename [old-name] [new-name]
移除某一个远程仓库：git remote rm [remote-name] 
将本地库的所有内容推送到远程库(第一次)：git push -u origin master
以后推送时：git push origin [分支名称]
从远程库克隆一个到本地：git clone [URL]
默认远程仓库为 origin 如果想换远程仓库名：git clone -o [remote-name] [url]
查看已经配置的远程仓库服务器：git remote -v
-v 会显示远程仓库使用的git以及对应的URL
取回远程某个分支的更新，再与本地某个分支合并：git pull [远程主机名] [远程分支名]:[本地分支名]
抓取最新的分支：git pull

打一个新标签：git tag [tag-name]
查看所有标签：git tag
指定在某一次提交后面打标签：git tag [tag-name] [commit-id]
查看标签信息：git show [tag-name]
创建带有说明的标签：git tag -a [tag-name] -m [description-message] [commit-id]
推送标签：git push origin [tag-name]
一次性的推送很多标签：git push origin —tags

创建一个新的分支并且切换到新的分支：git checkout -b [branch-name]
查看当前所有分支：git branch
切换分支：git checkout [branch-name]
合并指定分支到当前分支(快速融合),如果不行要解决冲突：git merge [branch-name] 
删除指定分支：git branch -d [branch-name]
查看分支合并图：git log —graph
合并分支禁用fast forward(合并要创建一个新的commit)：git merge —no-ff -m “description-message” dev
把工作现场存储起来(查看工作区就是干净的)：git stash
查看工作现场存到哪里了：git stash list
恢复工作现场,同时删除stash内容：git stash pop
丢弃一个没有被合并过的分支：git branch -D [branch-name]

从当前分支创建dev分支  git checkout -b dev 等同于 git checkout -b dev origin/dev
从master分支创建dev分支 git checkout -b dev origin/master  



 

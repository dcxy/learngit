1.初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit（git commit -a提交所以修改），完成。

2.如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

3.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log（git log --pretty=oneline）可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

4.
工作区（Working Directory），比如learngit文件夹就是一个工作区。
版本库（Repository），工作区隐藏目录.git，不算工作区。版本库包括叫stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

5.Git跟踪修改而不是文件，每次修改，如果不add到暂存区，那就不会加入到commit中。

6.撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

7.删除文件
本地删除rm
从版本库中删除，git rm并git commit
误删恢复git checkout -- file

8.远程仓库
8.1添加远程仓库
git remote add origin git@github.com:blueyescode/learngit.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容到远程库origin
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。
8.2克隆远程库

git clone git@github.com:blueyescode/gitskills.git
把远程库gitskills克隆到本地


9.分支管理
9.1创建与合并分支
查看分支：git branch
创建分支：git branch <name>
删除分支：git branch -d <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
9.2解决冲突
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图。
9.3分支管理策略
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
9.4bug分支
git stash保存现场
git stash list查看
git stash apply恢复，git stash apply stash@{0}恢复指定stash
git stash drop删除
git stash pop恢复并删除
9.5多人协作
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

10.标签管理
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id：git tag <name> commit_id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。
git show <tagname>查看标签信息
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
















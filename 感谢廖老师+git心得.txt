首先要感谢廖老师的git教程，让我受益匪浅！

git的心得

关于git: 一个免费又好用的分布式版本控制系统. 不同CVS和SVN等集中式版本控制系统, 分布式的git能够在没有网络的情况在本地上工作,等到有了网络后可以重新上传到服务器上. 而集中式则需要在联网状态下才能工作.

windows下已有大神做好整合好的git. 安装完打开git bash, 通过以下两条命令设置本地用户名和邮箱
git config --global user.name "Your name" git config --global user.email "xxxx@xx.com"

版本库: 一个用来保存你工作的文件,并在里面对这些文件进行一系列方便的操作.
创建版本库只需要一条简单的指令, 但前提是要先设置好版本库你所想创建的目录位置. 而设置方式和cmd中的使用相似. 通过cd指令去到你所需要的目录.
到达以后, 使用git init 即可创建一个已经被初始化好的版本库.

在版本库中操作: 可以把我们工作的文件添加到版本库中, 添加后可以对你的文件进行修改并保存. 若保存后后悔某些操作也可以时光倒流把版本库里的文件变回某一刻所保存的状态.
首先是添加文件, 在版本库的目录下添加某些文件例如readme.txt后, 输入命令 git add readme.txt即可把该文件添加到“暂存区”. 然后用命令 git commit -m "操作说明" 把该文件添加到版本库中.

工作区和暂存区:工作区就是电脑上看到的目录, 而暂存区是版本库内的一部分成分(舞台). git add指令只是把工作区中的文件添加到暂存区中, 而git commit是把暂存区中的文件添加到当前分支(又是版本库中的一部分)并清除暂存区中的东西.

修改文件:当一个文件完好的添加到分支上后, 假若又在工作区上修改了该文件, 就要重新用git add把文件添加到暂存区中, 使用git status命令能查看版本库中的状态(是否有改动). 若对文件进行修改后, 使用git status后再使用git diff能够查看修改后的文件和文件以前保存在版本库的不同之处.再用commit提交本次修改到版本库.

回到过去(回档/撤销):平时工作的时候难免会出差错而需要重新改动,但此时在版本库中的文件已经错误的版本.此时想要补救可以通过git的一个恢复功能直接回到最初的版本进行改动,从而不需要从已经出错的文件上花费大量时间. 通过 git log和git reflog等等(附带额外命令). 可以查看一路以来每次commit到版本库的记录和每次记录特有的版本号. 使用git reset --hard xxxxx(版本号) 直接回到某一版本的时候. 而上述操作是对于整个版本库. 有时候可能会出现后悔把某些不需要的文件加入到了暂存区,而会使得工作变的混乱,这时候就需要撤销文件添加这个操作. 通过 git reset HARD <filename> 撤销文件的添加. 而若某文件不小心改动,且不需要这些改动. 用git checkout <filename>命令即可直接改动工作区上的文件并使其恢复到版本库上的版本.

远程仓库: 学会了在本地如何利用git便利的工作后, 我们可以把工作后的这些资料保存好并克隆到一个服务器上. 这样即使在本地电脑上出了什么差错而导致数据丢失. 也可以从之前保存好在服务器上下载回来. 而这个服务器, 我们使用github上免费提供的仓库托管服务.
由于github上的远程仓库和本地仓库连接是通过ssh加密的,因此需要创建ssh的key. 在git bash上输入ssh-keygen -t rsa -C "youremail@xxxx.com". 输入后可在用户主目录找到.ssh目录. 里面含有密钥和公钥. 可在github上登记公钥进行两者之间的绑定.

进行连接并推送: 首先在github上创建一个git仓库. 创建后,在git上输入一条命令使本地仓库和刚创建的仓库关联起来. 因而我们可以把本地的内容推送到远程仓库上保存. git remote add origin git@github.com:yourname/xxxxx.git.然后进行推送操作, 第一次推送的时候我们使用 git push -u origin master命令 -u参数可以把本地的master分支和远程的master分支关联起来. 从此以后的操作将会被简化.

从远程仓库上克隆下来: 当其他人也需要用到你所创建的仓库. git可以直接把所需要的仓库整个克隆下来到本地. 使用git clone git@github.com:yourgithubname/xxxxx.git 即能把所需的远程哭克隆到指定的本地目录.

分支: 分支就正如有多条世界线一样. 相互之间互不影响. 而这种特性也正适合我们平时工作中对文件的改动. 由于不同分支之间相对独立, 所以在多人协作的工作上, master作为大家的主支. 自己各自创建分支xxx. 并且在分支上随意改动,并不会影响到master主支上. 随后分支上工作完毕后,还能让分支合并到其他分支上.

分支的操作: 首先是创建分支, git checkout -b dev 即可创建一条名为dev的分支并自动切换到dev分支上. 该分支是建立在上述命令之前所选择的分支上.(例如之前是指向master分支的,使用以上命令后所创建的dev是master的分支). 而上述命令也是以下两条命令整合起来的. 相当于输入了以下两条: git branch dev; git checkout dev; 想要查看当前版本库中的所有分支可以通过 git branch来查看. 而列出的分支, 分支前带有*号就是当前所指向的分支. 而当你在这条分支上工作完了, 可以使用git checkout xxxx 回到你所想要的分支上.

分支的合并和删除: 为了把一条分支合并到所需的分支上(例如master). 首先要先用 git checkout master命令指向master分支. 然后通过git merge dev (把dev分支合并到master上). 合并后,若该分支没有其他作用,即可通过git branch -d dev 把dev分支删除掉.

合并冲突: 有时候分支之间的合并并不是顺风顺水. 而是可能会因为两者之间的文本内容问题而产生了冲突. 这个时候使用合并命令后就会提示出错并要求用户手动打开发生冲突的文件并解决冲突内容(一般是删除一些内容). 改动完毕后. git commit -m "xxx" 提交. 使用带参数的git log 即git log --graph --pretty=oneline --abbrev-commit 能查看分支的合并情况. 同时若有什么差错可以根据上面的版本号随时进行时光倒流.

隐藏工作区: 有时候若需要突然创建分支去修复一些问题, 然而当前分支上还有工作没有做完. 因为未完成所以并不想提交, 但若不提交即会影响分支的创建. 因此此时就需要使用git stash把当前工作区的内容隐藏起来. 使用命令后,用git status查看状态会发现工作区之前的还没完成的地方已经被隐藏起来.显示干净的工作区,即可放心的创建新的分支,并进行修复的工作. 修复完以后合并到主支后,是时候需要把之前隐藏的文件显示回来了! 使用git stash list 即可查看之前所隐藏的记录. 恢复隐藏内容有两种方式, 1为git stash apply恢复 但恢复后并不会自动删除 需要再使用git stash drop才能把记录删掉. 2为git stash pop 这个不但会恢复并且会自动删除内容.

强制删除分支: 删除分支为git branch -d xxx 但对于一些改动过但还没合并的分支, 若用上述命令尝试删除则会显示错误,提示不能删除. 这时就需要使用D参数强制删除 git branch -D xxx

多人协作的一些操作细节: git remote可以查看关于远程库的信息. 而带上参数-v能查看更详细的信息. 在多个人的工作情况下, 每个人各自像远程库提交自己所修改的版本. 这样就难免人与人之间不同的版本会产生冲突. 此时提交就会提示失败, 此时可以把之前其他人所最新提交的分支origin/dev拉下来 用git pull, 但之前要先把本地dev和远程库上的origin/dev链接起来才可以pull下来. git branch --set-upstream dev origin/dev . 然后再使用git pull就能拉下来并且合并, 解决冲突 提交. 修改完冲突后再push上远程库!

标签: 我们可以用git reset --hard xxxx(版本号)来进行回到过去. 然而这个版本号是根据某种算法计算出来的. 要想记住实在不方便. 而标签即使一种更方便易记而又能充当版本号的作用的东西.

标签的操作: 首先是创建标签, 切换到需要打上标签的分支上后, 敲命令git tag <标签名>即可给当前分支上最新提交的那个commit附上该标签. 若想为特定的commit打上标签. 只需要 git tag <标签名> <commit id>. git show <tag name>可以显示某个标签所附的commit的具体信息.  另外若想给该标签附带说明信息, 带添加tag的时候可以额外带一个-m参数 git tag -a <tag name> -m "introduction" <commit id> . 还有一种用私钥签名的标签. 需要PGP签名, 只需把参数-a 改为-s即可. 标签的删除方式为git tag -d <tag name>. 使用git push origin <tagname> 或者 git push origin --tags即可把标签推送到远程库上. 但若要删除远程库上的标签, 需要先删除本地的标签, 再使用 git push origin :refs/tags/<tagname>.

忽略特殊文件: 有时候本地的版本库目录上需要放一些并不需要添加到版本库的文件, 但若是不提交的话, 每次git status就会显示文件没有添加的提示. 这时候就需要让git知道这些文件应该要被忽略掉.
在版本库目录中创建.gitignore文件, 并在里面写入需要忽略的文件(xxx.txt)或类文件(*.txt)[以文本格式txt举例] , 最后把这个忽略文件添加到版本库中即能生效并忽略掉不应该出现的文件.

假若硬是要添加某个被忽略的文件. 添加参数 git add -f <filename>即可. 另外git check-ignore -v <filename>可以查看被忽略文件的规则在.gitignore文件中的第几行.

最后再次感谢廖老师的教程!
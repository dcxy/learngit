# git_use
创建版本库--
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit


  git init--创建git仓库

  git add readme.txt--用命令git add告诉Git，把文件添加到仓库：
  
  git commit -m "wrote a readme file"--用命令git commit告诉Git，把文件提交到仓库

  git status--当前版本库状态.git status命令可以让我们时刻掌握仓库当前的状态
  
  git diff readme.txt--顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
  
  git log--查看log日志，
  
  git log --pretty=oneline--日志转成一行，比较醒目
  
  git reset --hard HEAD^--回退一个版本
  
  git reset --hard 3628164--回退到版本3628164
  
  cat readme.txt--看看readme.txt的内容
  
  git reflog--Git提供了一个命令git reflog用来记录你的每一次命令
  
  
  第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

  第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
  
  git checkout -- readme.txt--把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态

  git reset HEAD readme.txt--git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
  
  要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
  
  关联后，使用命令git push -u origin master第一次推送master分支的所有内容；此后，每次本地提交后，
  只要有必要，就可以使用命令git push origin master推送最新修改；
  
  git clone git@github.com:littledou/git_use.git--克隆版本库

  git branch --查看分支

  git branch dev --创建分支dev

  git checkout dev--切换到分支dev

  git checkout -b dev--创建dev分支并切换到dev

  git merge dev --合并dev分支到当前分支

  git branch -d dev-- 删除分支dev


#  解决冲突

   分支dev修改了README.md,切换到主分支也去修改README.md，这样冲突无法直接merge，先 git merge dev,然后查看文件详情中出现的《《《HEAD，调整修改之后在master上提交

   git merge --no-ff -m "merge with no-ff" dev--强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

# Bug解决

  当前在dev分支需要去master解决1bug

  git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作：切到master chackout一个issue分支，解决bug合并到master删除issue切到dev

  git stash list--查看当前保存的工作区

  git stash apply--恢复保存的工作区

  git stash drop-- 删除stash

  git stash pop--恢复并删除

  
#强制删除某未合并的功能分支

  git branch -D feature

# 多人协作

  git remote--查看远程库的信息

  git remote -v --查看更详细的信息


#标签管理

  git tag v1.0--创建v1.0表签

  git tag --查看标签

  git tag v1.0 6224234--对某次提交打标签

  git show v1.0--标签信息

  git tag -d v1.0--删除标签

  git push origin --tags--将全部未提交的标签提交到远程

  已提交的标签删除

  git tag -d v1.0->git push origin :refs/tags/v1.0


  
 
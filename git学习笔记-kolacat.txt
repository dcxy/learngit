![git.jpeg][1]
这篇文章用以回顾git基础知识，主要分为3点：
**1.git原理**
**2.本地git命令**
**3.远程仓库与github使用**
(本文仅梳理知识点，如果你想从头学习git，建议[廖老师的git教程][2])
<!--more-->

git原理
==== 
版本库
----
git将被提交的修改记为结点，每个结点指向它之后提交的结点，形成了一种树的结构，分支的个数等于叶结点的个数。同时参与版本控制的还有指向结点的指针，每个分支有一个指针变量来控制分支当前的版本。通过HEAD指针变量来确定总的当前的版本，同时也可以用指针常量来发行一个确定的版本。
git仓库
----
一个git仓库（存放了特定数据结构的文件夹）由三部分组成：工作区、暂存区、版本库。工作区就是你正常工作的地方，暂存区用来暂时存放你距上个版本所做的修改，版本区是存放所有版本（结点、指针等）的地方。
工作流程
----
一个正常的工作流程：在工作区修改——>提交到暂存区——>提交到版本库，所有的提交都是可以回退的，你也可以指定版本库里的某个版本（也就是上文所说的修改结点）来覆盖工作区的内容，从而进行版本的控制。
分布式
----
分布式是依靠远程仓库实现的，你可以将一个远程仓库与本地仓库管理，然后两者之间的版本库就可以选择相互同步，从而实现分布式版本控制。
本地git命令
====
配置
----
配置身份信息：
>git config --global user.name "名字"（你也可以去掉--global只对指定的git仓库配置）
 git config --global user.email 邮箱
 git config --list 可以查看所有配置信息

初始化git仓库：
>git init   (在要指定为仓库的目录下运行)

修改
----
提交修改到暂存区：
>git add 文件名（提交修改或新建，可以加*提交所有修改文件到暂存区）
 git rm 文件名（提交删除） 
   
提交修改到版本库：
>git commit -m "描述"

撤销修改：
>git checkout --文件名（撤销对一个文件的修改：若暂存区有内容，就回退到暂存区，若暂存区无内容则会退到版本区HEAD指针指向的结点）
git reset HEAD 文件名（将暂存区清零，不影响工作区）

修改版本库目前的版本（修改head指针）：
>git reset --hard 参数（参数为HEAD~n表示回退到前n个结点，参数为hash值表示回退到指定hash值的结点）

分支
----
新建分支：
>git branch 分支名（创建一个新的分支，即创建当前叶结点的兄弟结点）
 git branch -d 分支名（删除分支）

切换分支：
>git checkout 分支名（将HEAD指针指向分支的当前指针）

(上面两个可以合成一个命令git checkout -b 分支名)
合并分支
>git merge 分支名（合并指定分支和当前分支，两个结点合成一个结点，如果有冲突需要手动解决，加上参数--no-ff可以让两个结点指向一个新的结点）

辅助
----
查看辅助信息：
>git status (查看工作区状态)
 git log (查看日志，加上参数--pretty=oneline时可以让日志显示更简洁，--graph可以看到分支合并图)

远程仓库与github
====
github介绍
----
github实质上是一个git服务器，在上面创建项目会生成对应的git仓库。可以将该仓库与本地仓库管理，这样我们可以直接在自己的电脑上工作，然后推送到github上的远程仓库。不必担心你的项目会丢失，因为在github上还有一份。你也可以查看github上面的优秀项目，fork一个远程仓库到自己的账户下，然后在你的电脑上将其克隆到本地，同样可以在自己的电脑上工作。不过这时你的修改只能推送到自己账号下的远程仓库，要想把修改推送到别人的仓库，就需要使用github的pull request了。

github配置：
登陆github-->右上角-->Settings--SSH and GPG keys-->new SSH keys-->把你的ssh公钥复制到里面-->add.

相关命令
----
将github的项目克隆到本地：
>git clone git@github:你的账户/你的项目.git （将在当前目录下生成一个你的项目为名的git仓库）。

将github的项目关联本地的git仓库
>git remote 远程仓库名 git@github：你的账户/你的项目.git（远程仓库名只是本地的一个标识，可以随便取只要不重）

推送修改到远程仓库
>git push 远程仓库名 分支名（推送指定的分支的新提交到指定的远程仓库，在远程仓库前加参数-u表示第一次推送所有的提交，远程仓库名和分支名都可省去，表示推送所有的）

从远程仓库拉取信息
>git pull (如果失败是本地分支没有和远程分支关联，按提示做就可以解决)

创建一个与远程仓库关联的分支
>git checkout -b 分支名 远程仓库名/分支名（远程仓库有这个分支，而本地没有时使用）

查看远程仓库信息
>git remote (加参数-v可以查看更详细的信息)

其他
====
标签
----
查看标签
>git tag（查看所有标签，排序按字典序）
 git show 标签名（查看标签的详细信息）

设置标签
>git tag 标签名（发布当前版本。若版本号前加-d，则是删除标签）
 git tag -a 标签名 -m “描述” hash值 （发布hash值对应结点的版本，并附加描述）
 git tag -s 标签名 -m “描述” hash值 （发布hash值对应结点的版本，附加描述，并用私钥签名，需要安装gpg（GnuPG））

推送标签
>git push 远程仓库名 标签名（也可用--tags代替标签名推送所有的标签。推送删除需要把标签名写成:refs/tags/标签名号的形式）

别名
----
配置别名
>git config alias.别名 命令（在alias前加--global别名作用于当前用户，不加只作用于当前仓库。你也可以修改git仓库中的.git/config或者用户主目录的.gitconfig来配置）

忽略特殊文件
----
将工作区的一些文件排除在git管理之外。在git工作区根目录下建立.gitignore配置文件，符合配置的文件会被git忽略。格式见https://github.com/github/gitignore

总结
====
以上就是正常学习中需要用到的git知识，至于配置git服务器，权限控制等就不总结了，把有限的精力放在重要的事情上。

----------
Fake it till u become it...

  [1]: http://111.230.12.200/usr/uploads/2018/01/3783119102.jpeg
  [2]: https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
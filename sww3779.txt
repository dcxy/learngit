一、撤销未提交的代码，
1、如果没有add的话，直接git checkout src/com/jay/example/testforgit/MainActivity.java
2、如果已经add的话，我们要先取消添加才可以撤回提交，使用下述指令：
git reset HEAD src/com/jay/example/testforgit/MainActivity.java
git checkout src/com/jay/example/testforgit/MainActivity.java
3、如果提交了，想要回退到上一个版本
 git reset --hard HEAD
 git reset --hard HEAD^或者直接git reset --hard 版本号
查看版本号git log 和git reflog

二、分支
1、创建分支
git branch 分支名称
git checkout -b 分支名    创建同时会切换分支
2、查看所有分支
git branch -a
3、切换到某一分支
git checkout 分支名
4、删除某一分支
git branch -D 分支名
5、合并分支
git merge 分支名
三、本地仓库和远程仓库同步
先add、commit
然后 git push origin mater 或者直接git push
将本地的内容提交上去

服务器同步到本地:git pull



pwd命令用于显示当前目录
ls -ah可以查看隐藏文件


1、初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

第二步，使用命令git commit，完成。
2、git status命令可以让我们时刻掌握仓库当前的状态
git diff顾名思义就是查看difference

要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
3、git log命令显示从最近到最远的提交日志  git log --pretty=oneline只显示有日志的那一行

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
4、理解暂存区的概念
工作区：就是那个目录
版本库：是.git这个隐藏目录
版本库中有stage或者叫做index的暂存区，还有个git为我们自动创建的第一个分支master，以及指向master的一个指针HEAD
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。


5、git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

总之，就是让这个文件回到最近一次git commit或git add时的状态。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令

git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard 版本号/HEAD
6、git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
（git rm没怎么懂）
7、要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
8、
我们创建dev分支，然后切换到dev分支：

$ git checkout -b dev
相当于以下两条命令：
$ git branch dev
$ git checkout dev


查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>
9、git log --graph --pretty=oneline --abbrev-commit可以看到分支合并图
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
10、当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
方式二：一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
git stash apply stash@{0}
11、如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
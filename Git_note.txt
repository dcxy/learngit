
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
第二步，使用命令git commit，完成。

git status命令可以让我们时刻掌握仓库当前的状态
git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式
提交修改和提交新文件是一样的两步，第一步是git add,第二步是执行git commit,完成。

要随时掌握工作区的状态，使用git status命令。
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

git log命令显示从最近到最远的提交日志
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数: git log --pretty=oneline
需要友情提示的是，你看到的一大串类似3628164...882e1e0的是commit id（版本号）

好了,现在我们启动时光穿梭机,回退到上一个版本,怎么做呢？
首先,Git必须知道当前版本是哪个版本,在Git中,用HEAD表示当前版本,也就是最新的提交版本，上一个版本就是HEAD^，
上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

因为Git跟踪并管理的是修改，而非文件,每次修改，如果不add到暂存区，那就不会加入到commit中

如何撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件
一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了： rm filename
这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit。
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

Git的杀手级功能之一：远程仓库
GItHub 远程仓库
第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，
如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
$ ssh-keygen -t rsa -C "youremail@example.com"
然后一路回车，使用默认值即可
可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，
这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
点“Add Key”，你就应该看到已经添加的Key
当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交
只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

添加远程仓库：
首先，登陆GitHub，创建一个新的仓库
关联一个远程库，在本地使用命令git remote add origin git@server-name:path/repo-name.git；//$ git remote add origin git@github.com:LiRongbupt/仓库名.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

用远程库克隆：
首先，登陆GitHub，创建一个新的仓库gitskills
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库:
$ git clone git@github.com:LiRongbupt/gitskills.git
GitHub给出的地址不止一个，还可以用https://github.com/LiRongbupt/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

分支管理
每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。
在Git里，主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，
master才是指向提交的，所以，HEAD指向的就是当前分支。
一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点
每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长
当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上
Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！
不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变
假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并.
所以Git合并分支也很快！就改改指针，工作区内容也不变！
合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支

具体操作：
首先，我们创建dev分支，然后切换到dev分支：$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：$ git branch dev    $ git checkout dev
用git branch命令查看当前分支：* dev
  master
git branch命令会列出所有分支，当前分支前面会标一个*号
然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行,然后提交：
$ git add readme.txt 
$ git commit -m "branch test" 
现在，dev分支的工作完成，我们就可以切换回master分支：
$ git checkout master
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变
现在，我们把dev分支的工作成果合并到master分支上：
$ git merge dev
合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。
小结：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>

解决分支合并过程中的冲突问题：
当在分支和主支上分别对一个文件进行修改后并且都提交，然后进行合并时会发生冲突，这时需要手动解决问题，
此时直接查看文件中的内容，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，
然后手动修改文件中的内容后再次提交，用一下命令查看分支的合并情况
$ git log --graph --pretty=oneline --abbrev-commit
最后删除分支


分支管理策略：
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
$ git merge --no-ff -m "Information" branch_name
--no-ff参数，表示禁用Fast forward,合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在分支上，也就是说，分支是不稳定的，到某个时候，比如1.0版本发布时，再把分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在分支上干活，每个人都有自己的分支，时不时地往分支上合并就可以了。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并


bug分支
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。


开发一个新功能，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。



多人协作开发
多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


标签管理，对版本号的管理，
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动）
所以，创建和删除标签都是瞬间完成的。tag标签就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

在Git中打标签非常简单，首先，切换到需要打标签的分支上
git tag <name>就可以打一个新标签,可以用命令git tag查看所有标签
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签
找到历史提交的commit id,然后$ git tag 版本号 commit_id 打上标签
标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息
还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -a 版本号 -m "" id


标签的删除操作：
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。




























































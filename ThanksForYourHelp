初始化仓库 git init
添加文件到仓库 1  git add   可添加多个 2 git commit


工作区的状态  git status 
查看修改内容  git diff

当前版本	  HEAD
上一个版本	  ^
上多个版本	  ~N
eg.退回上个版本git reset --hard HEAD^
调换 		  git reset --hard commit_id
查看提交历史  git log 
查看命令历史  git reflog


工作区就是git的目录（除了.git）
暂存区就是add添加的修改
commit把暂存区一次性添加到分支

为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件

创建一个新文件也是修改
Git管理的是修改

git checkout -- readme.txt
让这个文件回到最近一次git commit或git add时的状态
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。
git reset HEAD readme.txt 把暂存区的修改撤销(unstage)

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git
checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两
步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不
过前提是没有推送到远程库。
gitcheckout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都
可以“一键还原”。

git rm test.txt 从版本库中删除文件  貌似还需要commit一下才生效

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修
改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有
联网都可以正常⼯工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地
提交推送一下就完成了同步

远程克隆
git clone git@github.com:michaelliao/gitskills.git

GitHub给出的地址不止一个，还可以用https://github.com/
michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的⿇麻烦是每次推送都必须输入口令，但是在某些只
开放http端口的公司内部就无法使用ssh协议而只能用https。

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch name
切换分支：git checkout name
创建+切换分支：git checkout -b name
合并某分支到当前分支：git merge name
删除分支：git branch -d name

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

用git log --graph命令可以看到分支合并图。


分支合并名词 Fast forward
通常，合并分支时，如果可能，Git会用“Fast forward”模式，但这种模式下，删除分支
后，会丢掉分支信息。

git merge --no-ff -m "merge with no-ff" dev
--no-ff参数，表⽰示禁⽤用“Fast forward”

git stash 保存工作现场
git stash list 查看工作现场列表
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
另一种方式是用git stash pop，恢复的同时把stash内容也删了

你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
$ git stash apply stash@{0}

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D name强行删除。

查看远程库
git remote  [-v]
从本地推送分支
git push origin master
克隆远程分支
git clone git@github.com:xianyang5/learngit.git
这时候默认只能看到master分支
同步dev  
git fetch origin 
git checkout -b dev origin/dev

• 查看远程库信息，使用git remote -v；
• 本地新建的分支如果不推送到远程，对其他人就是不可见的；
• 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓
取远程的新提交；
• 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branchname，
本地和远程分支的名称最好一致；
• 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name
origin/branch-name；
• 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


• 命令git tag name用于新建一个标签，默认为HEAD，也可以指定一个commit id；
• -a tagname -m "blablabla..."可以指定标签信息；
• -s tagname -m "blablabla..."可以用PGP签名标签；
• 命令git tag可以查看所有标签；

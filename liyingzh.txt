1 初始化一个Git仓库，使用git init命令。

2 添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二步，使用命令git commit，完成。

3 要随时掌握工作区的状态，使用git status命令。

4 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

5 HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

6 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

7 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

8 Git跟踪修改，每次修改，git add再git commit. 如果不add到暂存区，那就不会加入到commit中。

9 撤销修改
    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

10
   查看分支：git branch
   创建分支：git branch <name>
   切换分支：git checkout <name>
   创建+切换分支：git checkout -b <name>
   合并某分支到当前分支：git merge <name>
   删除分支：git branch -d <name>
   用git log --graph命令可以看到分支合并图。
   要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
11 
    查看远程库信息，使用git remote -v；
    本地新建的分支如果不推送到远程，对其他人就是不可见的；
    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
12 
    命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
    git tag -a <tagname> -m "blablabla..."可以指定标签信息；
    命令git tag可以查看所有标签。
    命令git push origin <tagname>可以推送一个本地标签；
    命令git push origin --tags可以推送全部未推送过的本地标签；
    命令git tag -d <tagname>可以删除一个本地标签；
    命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
13 Fork A Repo:https://help.github.com/articles/fork-a-repo/

命令:
git init初始化一个git仓库
git add 添加一个文件到仓库
git commit -m "xxx" m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
git status查看仓库当前状态
git diff 查看具体修改内容
git log 查看历史记录 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
* HEAD表示当前版本 上一个版本就是HEAD^ 上上个就是HEAD^^ 往上100个可以写成HEAD~100
git reset --hard HEAD^ <file>(可变)版本回退，也可以把暂存区的修改会退到工作区。当我们使用HEAD时，表示最新版本
可以通过指定commit id的前几位回退到那个版本
git reflog 查看你的每一次命令，通过它查看commit id
* Git跟踪并管理的是修改，而非文件
git checkout -- <file>撤销修改，使文件回到最近一次git commit or git add (“--”这个不可丢 否则成了另一个命令)
*
 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库
*
git rm 删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

*
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
*

*
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。
*
git checkout -b <name> 创建分支
git checkout <name> 切换分支
git branch查看当前分支
git merge用于合并指定分支到当前分支
* Fast-forward 快进模式
git branch -d <name> 删除分支

*
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

*

*
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成

git log --graph --pretty=oneline --abbrev-commit 命令可以看到分支合并图。
*

*
分支策略

在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
*

*
git merge --no-ff -m <string> <分支>
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
*

*
某个分支出现bug时，首先将当前分支的任务“储藏”
git stash
在有问题的分支上创建解决问题的临时分支iusse-101
修复bug
修复后，切换原来分支，合并并删除临时分支iusse-101
回到工作分支，有两种方式回复工作：
1.git stash apply恢复，git stash drop 来删除stash内容
2.git stash pop恢复同时删除

git stash list查看stash内容
在多次stash，恢复的时候，先用git stash list 查看，然后恢复指定的stash,用命令：
git stash apply stash@{n}
*

*
开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。
*

*
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
*
git tag <name>创建标签
git tag查看所有标签

*
对于已经过去的某一个commit打上标签 可以这样：
git log --pretty=oneline --abbrev-commit
查看commit id，然后
git tag v0.9 commit-id
注意，标签不是按时间顺序列出，而是按字母排序的。可以用
git show <tagname>
查看标签信息
可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.1 -m "version 0.1 released" 3628164

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
*

*
操作标签
git tag -d <tagname>删除
git push orign <tagname>推送远程
git push origin --tags 一次全部推送

删除远程标签
先删除本地
git tag -d <tagname>
然后从远程删除
git push orgin :refs/tags/<tagname>
*